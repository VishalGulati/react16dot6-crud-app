{"version":3,"sources":["components/AppHeader/AppHeader.js","axios/AxiosLauncher.js","components/TableBody/TableBody.js","components/AppBody/AppBody.js","components/AppFooter/AppFooter.js","App.js","serviceWorker.js","index.js"],"names":["AppHeader","react_default","a","createElement","Component","API","axios","create","baseURL","sampleData","fields","title","stringValue","description","TableBody","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","fetchTasks","get","then","res","setState","tasks","data","catch","error","console","log","getTableBody","objectSpread","state","documents","map","task","index","key","className","onClick","deleteTask","name","addNewTask","post","taskId","split","pop","delete","concat","updateTask","tableBody","AppBody","components_TableBody_TableBody","AppFooter","class","id","target","rel","href","App","components_AppHeader_AppHeader","components_AppBody_AppBody","components_AppFooter_AppFooter","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.9e8ae3e4.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './AppHeader.css';\r\n\r\nclass AppHeader extends Component {\r\n    render() {\r\n        return (\r\n                <header>\r\n                    MY CRUD APP\r\n                </header>\r\n        );\r\n    }\r\n}\r\n\r\nexport default AppHeader;\r\n","import axios from 'axios';\r\n\r\nexport const baseURL = `https://firestore.googleapis.com/v1beta1/projects/angular-task-e7f39/databases/(default)/documents/tasks`;\r\n\r\nexport const API = axios.create({\r\n    baseURL: baseURL\r\n});\r\n","import React, { Component } from 'react';\r\nimport './TableBody.css';\r\nimport { API } from '../../axios/AxiosLauncher';\r\n\r\nconst sampleData = {\r\n    \"fields\": {\r\n        \"title\": {\r\n            \"stringValue\": \"task2\"\r\n        },\r\n        \"description\": {\r\n            \"stringValue\": \"Vishal - My second task\"\r\n        }\r\n    }\r\n};\r\n\r\nclass TableBody extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            tasks: null\r\n        }\r\n    }\r\n\r\n    fetchTasks = () => {\r\n        API.get()\r\n            .then(res => {\r\n                this.setState({\r\n                    tasks: res.data\r\n                })\r\n            })\r\n            .catch(error => {\r\n                console.log(error);\r\n            })\r\n    }\r\n\r\n    getTableBody = () => {\r\n        const { tasks } = { ...this.state };\r\n        return tasks ? tasks.documents.map((task, index) => {\r\n            return (<tr key={index}>\r\n                <td>{task.fields.title.stringValue}</td>\r\n                <td>{task.fields.description.stringValue}</td>\r\n                <td>\r\n                    <button className=\"btn btn-danger delete-btn\" onClick={() => this.deleteTask(task.name)}>\r\n                        <span className=\"glyphicon glyphicon-trash\"></span> Delete\r\n                    </button>\r\n                    <button className=\"btn btn-primary\"><span className=\"glyphicon glyphicon-edit\"></span> Update</button>\r\n                </td>\r\n            </tr>)\r\n        }) : '';\r\n    }\r\n\r\n    addNewTask = () => {\r\n        API.post('', sampleData)\r\n            .then(res => {\r\n                this.fetchTasks();\r\n            })\r\n            .catch(error => {\r\n                console.log(error);\r\n            });\r\n    }\r\n\r\n    deleteTask = (name) => {\r\n        const taskId = name.split('/').pop();\r\n        API.delete(`/${taskId}`)\r\n            .then(res => {\r\n                this.fetchTasks();\r\n            })\r\n            .catch(error => {\r\n                console.log(error);\r\n            });\r\n    }\r\n\r\n\r\n    updateTask = () => {\r\n        API.post('', sampleData)\r\n            .then(res => {\r\n                this.fetchTasks();\r\n            })\r\n            .catch(error => {\r\n                console.log(error);\r\n            });\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.fetchTasks();\r\n    }\r\n\r\n    render() {\r\n        const tableBody = this.getTableBody();\r\n        return (\r\n            tableBody ? <div className=\"table-body-container\">\r\n                <table>\r\n                    <thead>\r\n                        <tr>\r\n                            <th>Title</th>\r\n                            <th>Description</th>\r\n                            <th></th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {tableBody}\r\n                    </tbody>\r\n                </table>\r\n                <button className=\"btn btn-primary newrow-btn\" onClick={this.addNewTask}>Add a new row</button>\r\n            </div> : ''\r\n        );\r\n    }\r\n}\r\n\r\nexport default TableBody;\r\n","import React, { Component } from 'react';\r\nimport './AppBody.css';\r\nimport TableBody from '../TableBody/TableBody';\r\n\r\nclass AppBody extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"app-body-container\">\r\n                <div className=\"row bg-row\">\r\n                </div>\r\n                <TableBody />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default AppBody;\r\n","import React, { Component } from 'react';\r\nimport './AppFooter.css';\r\n\r\nclass AppFooter extends Component {\r\n    render() {\r\n        return (\r\n                <footer>\r\n                    Designed and Coded with <span class=\"glyphicon glyphicon-heart\"></span> by Vishal Gulati \r\n                    (<a id=\"footer-link\" target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://www.vishalgulati.com\">https://www.vishalgulati.com</a>)\r\n                </footer>\r\n        );\r\n    }\r\n}\r\n\r\nexport default AppFooter;\r\n","import React, { Component } from 'react';\nimport './App.css';\nimport AppHeader from './components/AppHeader/AppHeader';\nimport AppBody from './components/AppBody/AppBody';\nimport AppFooter from './components/AppFooter/AppFooter';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <AppHeader />\n        <AppBody />\n        <AppFooter />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}